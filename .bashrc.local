## Personal configuration for bash

# Increase buffer size for history.
HISTSIZE=10000
HISTFILESIZE=10000

# Append number of commands executed to PS1 variable.
PS1="${PS1/%\\$ / #\\#\\n\\$ }"

# Append git repository status if available.
if [[ -f /usr/lib/git-core/git-sh-prompt ]]; then
  source /usr/lib/git-core/git-sh-prompt
  GIT_PS1_SHOWDIRTYSTATE=1
  GIT_PS1_SHOWUPSTREAM="auto"
  PS1="${PS1/ #\\#/\$(__git_ps1 \" (\%s)\") #\\#}"
fi

# Colored GCC warnings and errors.
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Deactivate stty stop command to use <C-s> for incremental forward
# command search.
stty stop undef

## Configure environment variables.

# Put one or more paths to the head of an environment variable that
# holds a list of paths. The specified path will not be added if it is
# already contained in the variable or it is not a directory. The
# variable will be exported to persist for child processes.
#
# Example usage:
#
#   prepend_path_to_env LD_LIBRARY_PATH $HOME/usr/lib
#   prepend_path_to_env PATH $HOME/usr/bin $HOME/.local/bin
#
# @param $1 var  The name of environment variable.
# @param $2..N paths  The list of paths to be added.
prepend_path_to_env() {
  # More than one arguments are required.
  if [[ $# < 2 ]]; then
    echo "At least two arguments required. (${BASH_SOURCE[0]}:${BASH_LINENO[0]})" 1>&2
    return 1
  fi

  local var="$1"; shift
  local paths=("$@")
  # Warn if a path was passed as the first argument for mistake.
  if [[ $var =~ "/" ]]; then
    echo "$var should be put after variable name. (${BASH_SOURCE[0]}:${BASH_LINENO[0]})" 1>&2
    return 1
  fi

  # Get the current value of the environment variable.
  local values="$(eval echo \$$var)"

  # Iterate over the specified paths in reversed order to keep the
  # order of passed arguments.
  for (( i=${#paths[@]}-1; i>=0; i-- )); do
    local path="${paths[$i]}"

    # Skip if the path is not a directory.
    [[ ! -d "$path" ]] && continue

    # Add path to the head of the variable if it is not contained.
    if [[ ":$values:" != *":$path:"* ]]; then
      export $var="$path:$values"
      values="$(eval echo \$$var)"
    fi
  done
}

# Motor Intelligence Lab. library.
# https://www.mi.ams.eng.osaka-u.ac.jp/open-e.html
prepend_path_to_env LD_LIBRARY_PATH "$HOME/usr/lib"
prepend_path_to_env PATH "$HOME/usr/bin"

# Add directories to search for .pc files for pkg-config.
# https://www.freedesktop.org/wiki/Software/pkg-config/
prepend_path_to_env PKG_CONFIG_PATH "$HOME/usr/lib/pkgconfig"

# pyenv is a simple python version management.
# https://github.com/pyenv/pyenv
export PYENV_ROOT="$HOME/.pyenv"
prepend_path_to_env PATH "$PYENV_ROOT/bin"
if command -v pyenv 1>/dev/null 2>&1; then
   eval "$(pyenv init -)"
fi

# pipx provides a way to execute binaries from Python packages in
# isolated environments.
# https://github.com/pipxproject/pipx
prepend_path_to_env PATH "$HOME/.local/bin"

# Configure paths for Go Programming Language.
# https://golang.org/
# https://github.com/golang/go/wiki/SettingGOPATH
export GOPATH="$HOME/.go"
export GOROOT="$HOME/usr/lib/go"
prepend_path_to_env PATH "$GOPATH/bin" "$GOROOT/bin"
